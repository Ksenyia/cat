//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include <iostream>
#include <math.h>
#include <string.h>
#include <string.h>




#include "Unit2.h"
  using namespace std;
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm2 *Form2;
int k=0;
String s;
Graphics::TBitmap  *kadr=new Graphics::TBitmap();
class IntNumber
{
   //int field, kol_mn;
		TRect Pr_ris1;
		TRect *Pr;
   int x_rsl(); //количество цифр числа
		int y_rsl();

	public:
		int w;
		int h;
		int x0;
		int y0;
		IntNumber(TRect fi) {Pr_ris1=fi;} //конструктор класса
		TRect ris(){return Pr_ris1;}	//получение значения числа
		bool peres(int a, int b);	//проверка на простоту
		int x_ris(); //количество цифр числа
		int y_ris(); //переворот числа


		void razlog(int &x0,int prost[]); //разложение числа на простые множители
		~IntNumber(){delete [] Pr;} // деструктор класса
};
int  IntNumber::int x_rsl();
{
	if (k1==1)
		{
			pr[kol_mn]=n2;
			kol_mn++;
			razl(n1/n2,n2);
		}
		else
		{
			if (n2==2)
				n2++;
			else
				n2+=2;
			razl(n1,n2);
		}
}
bool IntNumber::peres(int a, int b)
{
	if ((x_rsl>=a)&&(x_rsl<=a+w)&&(y_rsl>=b)&&(y_rsl<=b+h))
		return true;
	else
		return false;
}

int IntNumber::kol_numbers()
{
	int i=0;
	int s=field;
	while (s>0)
	{
		i++;
		s/=10;
	}
	return i;
}

int IntNumber::perevorot()
{
	int x=0;
	int s=field;
	while (s>=1)
	{
	  x=x*10+s % 10;
      s/=10;
	}
    return x;
}

void IntNumber::razlog(int &kol,int prost[])
{
	kol_mn=0;
	int p=(int)(log((double)field)/log(2.))+1;
	pr = new int [p];
	razl(field,2);
	kol=kol_mn;
	for (int i=0; i<kol;i++)
		prost[i]=pr[i];
}

//---------------------------------------------------------------------------
__fastcall TForm2::TForm2(TComponent* Owner)
	: TForm(Owner)
{


}
//---------------------------------------------------------------------------
void __fastcall TForm2::Button1Click(TObject *Sender)
{
	   kadr -> LoadFromFile("APLANE.BMP");
	   kadr -> Transparent = true;
	   w = kadr -> Width;
	   h = kadr -> Height;
	   Pr_kadr = Bounds (0, 0, w, h);
	   x = - w;
	   y = 20;
	   fon -> Width = w;
	   fon -> Height =h;
	   Pr_fon = Bounds (x, y, w, h);
	   fon -> Canvas -> CopyRect(Pr_kadr, Image1 -> Canvas, Pr_fon);

}
//---------------------------------------------------------------------------
void __fastcall TForm2::Timer1Timer(TObject *Sender)
{
	 Image1 -> Canvas -> CopyRect(Pr_fon, fon -> Canvas, Pr_kadr);
	 x++;
	 if (x > Image1 -> Width)
		x = -w;
	 Pr_fon = Bounds (x, y, w, h);
	 fon -> Canvas -> CopyRect(Pr_kadr, Image1 -> Canvas, Pr_fon);
     Image1 -> Canvas -> Draw(x, y, kadr);

}
//---------------------------------------------------------------------------
